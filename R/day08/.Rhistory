sqlstr <- 'SELECT * from weather';
#4. ResultSet
weather <- dbGetQuery(conn,sqlstr)
str(weather)
#5. Close
dbDisconnect(conn)  #db연결 끊기
return(weather)
}
library(rJava)
library(RJDBC)
library(DBI)
drvName <- 'org.apache.hive.jdbc.HiveDriver';
id <- 'root';
pwd <- '111111';
url <- 'jdbc:hive2://192.168.111.100:10000';
hive_lib <- 'c:\\java_hive_lib'
.jinit();               #클래스패스에 지정
.jaddClassPath(dir(hive_lib,full.names=T));
.jclassPath();
drv <- JDBC(driverClass = drvName,
classPath = 'hive-jdbc-1.0.1.jar')
#2. Connection
conn <- dbConnect(drv,url,id,pwd)
sqlstr <- 'SELECT * from weather';
#4. ResultSet
weather <- dbGetQuery(conn,sqlstr)
str(weather)
str(weather)
weather <- dbGetQuery(conn,sqlstr)
str(weather)
sqlstr <- 'SELECT date, AVG(sky), SUM(rain) FROM weather GROUP BY date';
#4. ResultSet
weather <- dbGetQuery(conn,sqlstr)
str(weather)
str(weather)
weather <- rename(weather,
sky = '_c1',
rain = '_c2')
#4. ResultSet
weather <- dbGetQuery(conn,sqlstr)
weather <- rename(weather,
sky = '_c1',
rain = '_c2')
str(weather)
weather
str(weather)
food
sqlstr
#3. Statement
sqlstr <- 'select * FROM food';
#4. ResultSet
food <- dbGetQuery(conn,sqlstr)
#4. ResultSet
food <- dbGetQuery(conn,sqlstr)
getDel <- function(){
library(rJava)
library(RJDBC)
library(DBI)
library(sqldf)
#----------------------------------------------------------------------
drvName <- 'oracle.jdbc.driver.OracleDriver';
id <- 'ruser';
pwd <- 'ruser';
url <- 'jdbc:oracle:thin:@70.12.114.144:1521:XE';
#1. Driver Loading
drv <- JDBC(driverClass = drvName,
classPath = 'c:\\java_hive_lib\\ojdbc6.jar')
#2. Connection
conn <- dbConnect(drv,url,id,pwd)
#3. Statement
sqlstr <- 'select * FROM food';
#4. ResultSet
food <- dbGetQuery(conn,sqlstr)
#5. Close
dbDisconnect(conn)  #db연결 끊기
return(food)
}
library(rJava)
library(RJDBC)
library(DBI)
library(sqldf)
#----------------------------------------------------------------------
drvName <- 'oracle.jdbc.driver.OracleDriver';
id <- 'ruser';
pwd <- 'ruser';
url <- 'jdbc:oracle:thin:@70.12.114.144:1521:XE';
drv <- JDBC(driverClass = drvName,
classPath = 'c:\\java_hive_lib\\ojdbc6.jar')
#2. Connection
conn <- dbConnect(drv,url,id,pwd)
#3. Statement
sqlstr <- 'select * FROM food';
#4. ResultSet
food <- dbGetQuery(conn,sqlstr)
str(food)
str(weather)
library(rJava)
library(RJDBC)
library(DBI)
drvName <- 'org.apache.hive.jdbc.HiveDriver';
id <- 'root';
pwd <- '111111';
url <- 'jdbc:hive2://192.168.111.100:10000';
hive_lib <- 'c:\\java_hive_lib'
.jinit();               #클래스패스에 지정
.jaddClassPath(dir(hive_lib,full.names=T));
.jclassPath();
drv <- JDBC(driverClass = drvName,
classPath = 'hive-jdbc-1.0.1.jar')
#2. Connection
conn <- dbConnect(drv,url,id,pwd)
sqlstr <- 'SELECT date, AVG(sky), SUM(rain) FROM weather GROUP BY date';
#4. ResultSet
weather <- dbGetQuery(conn,sqlstr)
weather <- rename(weather,
sky = '_c1',
rain = '_c2')
str(weather)
str(weather)
#코드
#--------------------------------------------------------------------------------
weather <- getWeather()
getDel <- function(){
library('rJava')
library('RJDBC')
library('DBI')
drvName <- 'oracle.jdbc.driver.OracleDriver';
#127.0.0.1:8080/apex에서 DB를 만들어줌
id <- 'ruser';
pwd <- 'ruser';
url <- 'jdbc:oracle:thin:@localhost:1521:XE';
#70.12.114.144
#1. Driver Loading
drv <- JDBC(driverClass = drvName,
classPath = 'c:\\java_hive_lib\\ojdbc6.jar');
#2. Connection
conn <- dbConnect(drv,url,id,pwd);
#3. Statement
sqlstr <- 'SELECT * FROM food2'
#4. ResultSet
food <- dbGetQuery(conn, sqlstr);
#5. Close
dbDisconnect(conn)
return (food);
}
getWeather <- function(){
library(rJava)
library(RJDBC)
library(DBI)
drvName <- 'org.apache.hive.jdbc.HiveDriver';
id <- 'root';
pwd <- '111111';
url <- 'jdbc:hive2://192.168.111.100:10000';
hive_lib <- "c:\\java_hive_lib"
.jinit();
.jaddClassPath(dir(hive_lib, full.names = T));
.jclassPath();
#1. Driver Loading
drv <- JDBC(driverClass = drvName,
classPath = 'hive-jdbc-1.0.1.jar');
#2. Connection
conn <- dbConnect(drv,url,id,pwd);
#3. Statement
sqlstr <- 'SELECT date, AVG(sky), SUM(rain) FROM weather GROUP BY date'
#4. ResultSet
weather <- dbGetQuery(conn, sqlstr);
#5. Close
dbDisconnect(conn)
return (weather);
}
#코드
#--------------------------------------------------------------------------------
weather <- getWeather()
weather <- rename(weather,
DAY = date,
sky = '_c1',
rain = '_c2')
weather$date <- as.Date(weather$date, format="%Y-%m-%d")
#--------------------------------------------------------------------------------
delivery <- getDel()
raw_delivery <- delivery
delivery <- rename(delivery,
DAY = 癤풡AY)
delivery2$DAY <- as.Date(delivery2$DAY, format="%Y-%m-%d")
#코드
#--------------------------------------------------------------------------------
weather <- getWeather()
weather <- rename(weather,
DAY = date,
sky = '_c1',
rain = '_c2')
weather$date <- as.Date(weather$date, format="%Y-%m-%d")
#--------------------------------------------------------------------------------
delivery <- getDel()
raw_delivery <- delivery
delivery <- rename(delivery,
DAY = 癤풡AY)
delivery2$DAY <- as.Date(delivery2$DAY, format="%Y-%m-%d")
#--------------------------------------------------------------------------------
weather$state <- ifelse(weather$rain >= 5, 2,
ifelse(weather$sky>=3, 1, 0))
weather$state <- ifelse(is.na(weather$state), 0, weather$state)
weather$sky <- round(weather$sky, 0)
#--------------------------------------------------------------------------------
delivery2 <- aggregate(CALLS~DAY+FOOD, delivery, sum)
#--------------------------------------------------------------------------------
result <- delivery2
result <- left_join(result, weather, id = "DAY")
#--------------------------------------------------------------------------------
result <- delivery2
delivery2
delivery2
delivery2 <- aggregate(CALLS~DAY+FOOD, delivery, sum)
delivery <- rename(delivery,
DAY = 癤풡AY)
source('~/TIL/R/day08/team.R', encoding = 'UTF-8')
getDel <- function(){
library('rJava')
library('RJDBC')
library('DBI')
drvName <- 'oracle.jdbc.driver.OracleDriver';
#127.0.0.1:8080/apex에서 DB를 만들어줌
id <- 'ruser';
pwd <- 'ruser';
url <- 'jdbc:oracle:thin:@70.12.114.144:1521:XE';
#70.12.114.144
#1. Driver Loading
drv <- JDBC(driverClass = drvName,
classPath = 'c:\\java_hive_lib\\ojdbc6.jar');
#2. Connection
conn <- dbConnect(drv,url,id,pwd);
#3. Statement
sqlstr <- 'SELECT * FROM food2'
#4. ResultSet
food <- dbGetQuery(conn, sqlstr);
#5. Close
dbDisconnect(conn)
return (food);
}
getWeather <- function(){
library(rJava)
library(RJDBC)
library(DBI)
drvName <- 'org.apache.hive.jdbc.HiveDriver';
id <- 'root';
pwd <- '111111';
url <- 'jdbc:hive2://192.168.111.100:10000';
hive_lib <- "c:\\java_hive_lib"
.jinit();
.jaddClassPath(dir(hive_lib, full.names = T));
.jclassPath();
#1. Driver Loading
drv <- JDBC(driverClass = drvName,
classPath = 'hive-jdbc-1.0.1.jar');
#2. Connection
conn <- dbConnect(drv,url,id,pwd);
#3. Statement
sqlstr <- 'SELECT date, AVG(sky), SUM(rain) FROM weather GROUP BY date'
#4. ResultSet
weather <- dbGetQuery(conn, sqlstr);
#5. Close
dbDisconnect(conn)
return (weather);
}
library('dplyr')
#--------------------------------------------------------------------------------
weather <- getWeather()
weather <- rename(weather,
DAY = date,
sky = '_c1',
rain = '_c2')
weather$DAY <- as.Date(weather$DAY, format="%Y-%m-%d")
#--------------------------------------------------------------------------------
delivery <- getDel()
delivery <- rename(delivery,
DAY = 癤풡AY)
delivery2 <- aggregate(CALLS~DAY+FOOD, delivery, sum)
delivery2$DAY <- as.Date(delivery2$DAY, format="%Y-%m-%d")
#--------------------------------------------------------------------------------
weather$state <- ifelse(weather$rain >= 5, 2,
ifelse(weather$sky>=3, 1, 0))
weather$state <- ifelse(is.na(weather$state), 0, weather$state)
weather$sky <- round(weather$sky, 0)
#--------------------------------------------------------------------------------
result <- delivery2
result <- left_join(result, weather, id = "DAY")
result2<-aggregate(CALLS~state+FOOD, result, mean)
result2$states <- ifelse(result2$state == 2, '눈/비',
ifelse(result2$state == 1, '흐림', '맑음'))
#--------------------------------------------------------------------------------
library(ggplot2)
ggplot(result2, aes(x=state, y=CALLS, col=FOOD))+ geom_line()
# 그리기
source('~/TIL/R/day08/team.R', encoding = 'UTF-8')
getDel <- function(){
library('rJava')
library('RJDBC')
library('DBI')
drvName <- 'oracle.jdbc.driver.OracleDriver';
#127.0.0.1:8080/apex에서 DB를 만들어줌
id <- 'ruser';
pwd <- 'ruser';
url <- 'jdbc:oracle:thin:@70.12.114.144:1521:XE';
#70.12.114.144
#1. Driver Loading
drv <- JDBC(driverClass = drvName,
classPath = 'c:\\java_hive_lib\\ojdbc6.jar');
#2. Connection
conn <- dbConnect(drv,url,id,pwd);
#3. Statement
sqlstr <- 'SELECT * FROM food2'
#4. ResultSet
food <- dbGetQuery(conn, sqlstr);
#5. Close
dbDisconnect(conn)
return (food);
}
getWeather <- function(){
library(rJava)
library(RJDBC)
library(DBI)
drvName <- 'org.apache.hive.jdbc.HiveDriver';
id <- 'root';
pwd <- '111111';
url <- 'jdbc:hive2://192.168.111.100:10000';
hive_lib <- "c:\\java_hive_lib"
.jinit();
.jaddClassPath(dir(hive_lib, full.names = T));
.jclassPath();
#1. Driver Loading
drv <- JDBC(driverClass = drvName,
classPath = 'hive-jdbc-1.0.1.jar');
#2. Connection
conn <- dbConnect(drv,url,id,pwd);
#3. Statement
sqlstr <- 'SELECT date, AVG(sky), SUM(rain) FROM weather GROUP BY date'
#4. ResultSet
weather <- dbGetQuery(conn, sqlstr);
#5. Close
dbDisconnect(conn)
return (weather);
}
library('dplyr')
#--------------------------------------------------------------------------------
weather <- getWeather()
weather <- rename(weather,
DAY = date,
sky = '_c1',
rain = '_c2')
weather$DAY <- as.Date(weather$DAY, format="%Y-%m-%d")
#--------------------------------------------------------------------------------
delivery <- getDel()
delivery <- rename(delivery,
DAY = 癤풡AY)
delivery2 <- aggregate(CALLS~DAY+FOOD, delivery, sum)
delivery2$DAY <- as.Date(delivery2$DAY, format="%Y-%m-%d")
#--------------------------------------------------------------------------------
weather$state <- ifelse(weather$rain >= 5, 2,
ifelse(weather$sky>=3, 1, 0))
weather$state <- ifelse(is.na(weather$state), 0, weather$state)
weather$sky <- round(weather$sky, 0)
#--------------------------------------------------------------------------------
result <- delivery2
result <- left_join(result, weather, id = "DAY")
result2<-aggregate(CALLS~state+FOOD, result, mean)
result2$states <- ifelse(result2$state == 2, '눈/비',
ifelse(result2$state == 1, '흐림', '맑음'))
#--------------------------------------------------------------------------------
library(ggplot2)
ggplot(result2, aes(x=state, y=CALLS, col=FOOD))+ geom_line()
ggplot(result2, aes(x=state, y=CALLS, fill=FOOD))+ geom_col(position = 'dodge')
getDel <- function(){
library('rJava')
library('RJDBC')
library('DBI')
drvName <- 'oracle.jdbc.driver.OracleDriver';
#127.0.0.1:8080/apex에서 DB를 만들어줌
id <- 'ruser';
pwd <- 'ruser';
url <- 'jdbc:oracle:thin:@70.12.114.144:1521:XE';
#70.12.114.144
#1. Driver Loading
drv <- JDBC(driverClass = drvName,
classPath = 'c:\\java_hive_lib\\ojdbc6.jar');
#2. Connection
conn <- dbConnect(drv,url,id,pwd);
#3. Statement
sqlstr <- 'SELECT * FROM food2'
#4. ResultSet
food <- dbGetQuery(conn, sqlstr);
#5. Close
dbDisconnect(conn)
return (food);
}
getWeather <- function(){
library(rJava)
library(RJDBC)
library(DBI)
drvName <- 'org.apache.hive.jdbc.HiveDriver';
id <- 'root';
pwd <- '111111';
url <- 'jdbc:hive2://192.168.111.100:10000';
hive_lib <- "c:\\java_hive_lib"
.jinit();
.jaddClassPath(dir(hive_lib, full.names = T));
.jclassPath();
#1. Driver Loading
drv <- JDBC(driverClass = drvName,
classPath = 'hive-jdbc-1.0.1.jar');
#2. Connection
conn <- dbConnect(drv,url,id,pwd);
#3. Statement
sqlstr <- 'SELECT date, AVG(sky), SUM(rain) FROM weather GROUP BY date'
#4. ResultSet
weather <- dbGetQuery(conn, sqlstr);
#5. Close
dbDisconnect(conn)
return (weather);
}
# delivery oracle에서 깨지는 칼럼명 변경 및 날짜 => date형으로 casting
delivery <- getDel()
delivery <- rename(delivery,
DAY = 癤풡AY)
# delivery oracle에서 깨지는 칼럼명 변경 및 날짜 => date형으로 casting
delivery <- getDel()
delivery <- rename(delivery,
DAY = 癤풡AY)
delivery2 <- aggregate(CALLS~DAY+FOOD, delivery, sum)
delivery2$DAY <- as.Date(delivery2$DAY, format="%Y-%m-%d")
# weather 가공
weather$state <- ifelse(weather$rain >= 5, 2,
ifelse(weather$sky>=3, 1, 0))
weather$state <- ifelse(is.na(weather$state), 0, weather$state)
source('~/TIL/R/day08/team.R', encoding = 'UTF-8')
getDel <- function(){
library('rJava')
library('RJDBC')
library('DBI')
drvName <- 'oracle.jdbc.driver.OracleDriver';
#127.0.0.1:8080/apex에서 DB를 만들어줌
id <- 'ruser';
pwd <- 'ruser';
url <- 'jdbc:oracle:thin:@70.12.114.144:1521:XE';
#70.12.114.144
#1. Driver Loading
drv <- JDBC(driverClass = drvName,
classPath = 'c:\\java_hive_lib\\ojdbc6.jar');
#2. Connection
conn <- dbConnect(drv,url,id,pwd);
#3. Statement
sqlstr <- 'SELECT * FROM food2'
#4. ResultSet
food <- dbGetQuery(conn, sqlstr);
#5. Close
dbDisconnect(conn)
return (food);
}
getWeather <- function(){
library(rJava)
library(RJDBC)
library(DBI)
drvName <- 'org.apache.hive.jdbc.HiveDriver';
id <- 'root';
pwd <- '111111';
url <- 'jdbc:hive2://192.168.111.100:10000';
hive_lib <- "c:\\java_hive_lib"
.jinit();
.jaddClassPath(dir(hive_lib, full.names = T));
.jclassPath();
#1. Driver Loading
drv <- JDBC(driverClass = drvName,
classPath = 'hive-jdbc-1.0.1.jar');
#2. Connection
conn <- dbConnect(drv,url,id,pwd);
#3. Statement
sqlstr <- 'SELECT date, AVG(sky), SUM(rain) FROM weather GROUP BY date'
#4. ResultSet
weather <- dbGetQuery(conn, sqlstr);
#5. Close
dbDisconnect(conn)
return (weather);
}
library('dplyr')
#--------------------------------------------------------------------------------
# weather hive에서 받고 칼럼명 변경 및 날짜 => date 형으로 casting
weather <- getWeather()
weather <- rename(weather,
DAY = date,
sky = '_c1',
rain = '_c2')
weather$DAY <- as.Date(weather$DAY, format="%Y-%m-%d")
# delivery oracle에서 깨지는 칼럼명 변경 및 날짜 => date형으로 casting
delivery <- getDel()
delivery <- rename(delivery,
DAY = 癤풡AY)
delivery2 <- aggregate(CALLS~DAY+FOOD, delivery, sum)
delivery2$DAY <- as.Date(delivery2$DAY, format="%Y-%m-%d")
# weather 가공
weather$state <- ifelse(weather$rain >= 5, 2,
ifelse(weather$sky>=3, 1, 0))
weather$state <- ifelse(is.na(weather$state), 0, weather$state)
weather$sky <- round(weather$sky, 0)
#--------------------------------------------------------------------------------
result <- delivery2
result <- left_join(result, weather, id = "DAY")
result2<-aggregate(CALLS~state+FOOD, result, mean)
result2$states <- ifelse(result2$state == 2, '눈/비',
ifelse(result2$state == 1, '흐림', '맑음'))
#--------------------------------------------------------------------------------
library(ggplot2)
ggplot(result2, aes(x=state, y=CALLS, col=FOOD))+ geom_line()
ggplot(result2, aes(x=state, y=CALLS, col=FOOD))+ geom_line()
